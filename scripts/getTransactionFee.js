const { ethers } = require("ethers");

// 连接到以太坊网络
const provider = new ethers.providers.JsonRpcProvider(
  // "https://mainnet.infura.io/v3/23a9ce843eaf4f59871ea1857d7e7045" // infura 个人版
  // "https://sepolia.infura.io/v3/23a9ce843eaf4f59871ea1857d7e7045"
  "https://rpc.ankr.com/eth" // ankr 免费版，比较慢
  // "https://rpc.ankr.com/eth/f34f4caa367e4d7c1ce9c1c636e1f9d1700eb8dee1f6fcbc42e2cd7bcf7f59d0" // ankr 个人版，免费
);

// provider
//   .getBlockNumber()
//   .then((blockNumber) => {
//     console.log("blockNumber", blockNumber);
//     process.exit(0);
//   })
//   .catch((e) => {
//     console.log(e);
//     process.exit(0);
//   });

async function estimateTransactionFee(message = "") {
  const sender = "0xa5DB40FDB4fFeD319AccF5729E1fCE5A6bE6b20B";
  const receiver = "0xa5DB40FDB4fFeD319AccF5729E1fCE5A6bE6b20B";
  const value = ethers.utils.parseEther("0");
  const data = ethers.utils.toUtf8Bytes("122");
  // const data = ethers.utils.toUtf8Bytes(
  //   "可以使用 SSH（安全外壳协议）在 GitHub 上的存储库中访问和写入数据。 通过 SSH 进行连接时，使用本地计算机上的私钥文件进行身份验证。 有关详细信息，请参阅“关于 SSH”。生成 SSH 密钥时，可以添加密码以进一步保护密钥。 每当使用密钥时，都必须输入密码。 如果密钥具有密码并且你不想每次使用密钥时都输入密码，则可以将密钥添加到 SSH 代理。 SSH 代理会管理 SSH 密钥并密钥"
  // );
  // 这个是一个链上合约的 tx，可以用来检测 estimateTransactionFee 是否准确
  // const sender = "0x755B68C97733680c1e123e1fdE0a063F0CA7683f";
  // const receiver = "0x0000000000001fF3684f28c67538d4D072C22734";
  // const value = ethers.utils.parseEther("0.0022");
  // const data = `0x2213bc0b00000000000000000000000070bf6634ee8cb27d04478f184b9b8bb13e5f471000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007d0e36a81800000000000000000000000000070bf6634ee8cb27d04478f184b9b8bb13e5f471000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004c41fff991f000000000000000000000000755b68c97733680c1e123e1fde0a063f0ca7683f00000000000000000000000032b86b99441480a7e5bd3a26c124ec2373e3f015000000000000000000000000000000000000000001a37e1a4ccfe5b135e06d0400000000000000000000000000000000000000000000000000000000000000a02fdcbc723207024d503c68f52068d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000010438c9c147000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000024d0e30db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4103b48be00000000000000000000000070bf6634ee8cb27d04478f184b9b8bb13e5f4710000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000271000000000000000000000000029c830864930c897efa2b9e9851342187b82010e0000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012438c9c14700000000000000000000000032b86b99441480a7e5bd3a26c124ec2373e3f015000000000000000000000000000000000000000000000000000000000000005500000000000000000000000032b86b99441480a7e5bd3a26c124ec2373e3f015000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000007afa9d836d2fccf172b66622625e56404e465dbd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`;

  // 构建交易
  const transaction = {
    from: sender,
    to: receiver,
    value,
    data,
  };

  // 获取预估的 Gas Limit
  const estimatedGas = await provider.estimateGas(transaction);
  // 获取当前 Gas Price
  const gasPrice = await provider.getGasPrice();
  // 计算预估交易费用
  const estimatedFee = estimatedGas.mul(gasPrice); // BigNumber 乘法
  console.log(`Estimated Gas: ${estimatedGas.toString()}`);
  console.log(`Gas Price: ${ethers.utils.formatUnits(gasPrice, "gwei")} Gwei`);
  console.log(
    `Estimated Transaction Fee: ${ethers.utils.formatEther(estimatedFee)} ETH`
  );

  process.exit(0);
}

function textToHex(text) {
  return (
    "0x" +
    Array.from(text)
      .map((char) => char.charCodeAt(0).toString(16).padStart(2, "0"))
      .join("")
  );
}

// const text =
//   "可以使用 SSH（安全外壳协议）在 GitHub 上的存储库中访问和写入数据。 通过 SSH 进行连接时，使用本地计算机上的私钥文件进行身份验证。 有关详细信息，请参阅“关于 SSH”。生成 SSH 密钥时，可以添加密码以进一步保护密钥。 每当使用密钥时，都必须输入密码。 如果密钥具有密码并且你不想每次使用密钥时都输入密码，则可以将密钥添加到 SSH 代理。 SSH 代理会管理 SSH 密钥并密钥";
// const hexResult = textToHex(text);

// console.log(hexResult);

estimateTransactionFee("abcde").catch((e) => {
  console.log(e);
  process.exit(1);
});
